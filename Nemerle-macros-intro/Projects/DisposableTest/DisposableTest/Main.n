using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

//[Disposable(DisposeName=Dispose)]
class Base : IDisposable
{
  private mutable _disposed : bool;

  //Implement IDisposable.
  public Dispose() : void
    implements IDisposable.Dispose
  {
    Dispose(true);
    GC.SuppressFinalize(this);
  }

  protected virtual Dispose(disposing : bool) : void
  {
    unless (_disposed)
    {
      when (disposing)
      {
        // Генерируем вызовы Dispose для IDisposable-полей.
        // Вставояем код очистки управляемых ресурсов предосталяемый пользователем.
      }
      // Вставляем код очистки неуправляемых ресурсов предосталяемый пользователем.
      // Обнуляем все изменяемые поля.
      _disposed = true;
    }
  }

  protected override Finalize() : void
  {
    // Simply call Dispose(false).
    Dispose(false);
  }
}

class Derived : Base, IDisposable
{
  private mutable _disposed : bool;

  protected override Dispose(disposing : bool) : void
  {
    unless (_disposed)
    {
      when (disposing)
      {
        // Release managed resources.
      }
      // Release unmanaged resources.
      // Set large fields to null.
      // Call Dispose on your base class.
      _disposed = true;
    }
    base.Dispose(disposing);
  }
  // The derived class does not have a Finalize method
  // or a Dispose method without parameters because it inherits
  // them from the base class.
}

module Program
{
  Main() : void
  {
    (Derived() : IDisposable).Dispose();
    _ = ReadLine();
  }
}