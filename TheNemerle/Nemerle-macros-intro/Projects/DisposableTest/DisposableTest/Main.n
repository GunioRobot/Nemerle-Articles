using System;
using System.Console;

class Base : IDisposable
{
  private mutable _disposed : bool;

  public Dispose() : void
    implements IDisposable.Dispose
  {
    Dispose(true);
    GC.SuppressFinalize(this);
  }

  protected virtual Dispose(disposing : bool) : void
  {
    unless (_disposed)
    {
      when (disposing)
      {
        // Освобождаем управляемые ресурсы.
        // Отписываемся от событий и удаляем текущий объект из разных списков.
      }
      // Очистка неуправляемых ресурсов.
      // Обнуление полей ссылающихся на объемные объекты 
      // (или всех изменяемых ссылочных полей).
      _disposed = true;
    }
  }

  // Если объект владает неуправляемыми ресурсами реализовать:
  protected override Finalize() : void
  {
    Dispose(false);
  }
}

class Derived : Base, IDisposable
{
  private mutable _disposed : bool;

  protected override Dispose(disposing : bool) : void
  {
    unless (_disposed)
    {
      when (disposing)
      {
         // Освобождаем управляемые ресурсы.
        // Отписываемся от событий и удаляем текущий объект из разных списков.
      }
      // Очистка неуправляемых ресурсов.
      // Обнуление полей ссылающихся на объемные объекты 
      // (или всех изменяемых ссылочных полей).
      _disposed = true;
    }
    base.Dispose(disposing);
  }

  // Если объект владает неуправляемыми ресурсами реализовать:
  protected override Finalize() : void
  {
    Dispose(false);
  }
}

module Program
{
  Main() : void
  {
    (Derived() : IDisposable).Dispose();
    _ = ReadLine();
  }
}